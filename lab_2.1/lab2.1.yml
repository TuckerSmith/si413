# SI413 Lab 2.1: Spec for StringBoolVar Language

your_name: Tucker Smith

your_alpha: 265922

used_ai: Y # remember to turn in an aichat.md file as well

# describe any collaboration or help you got from classmates
collaboration: |
    NONE

# leave this as NONE for your initial submission
changes_on_resubmit: |
    NONE

#### TASK 1 ####

language_name: ShippyLanguage


#### TASK 2 ####

example_program: |
    1MC<"Secure a watch, what's the password?">!
    receive<watch_pass>!   log Getting the conn's password!

    declare<auth_status>!   log Creating a variable to hold our boolean result!

    assign<auth_status/stand_by_and_await<signal_contains<watch_pass/"starboard">/stand_by_not<signal_less_than<watch_pass/"Zulu">>>>!
    log The password must contain "starboard" and not come lexicographically before "Zulu"!

    1MC<"Security status: "/auth_status>!
    log Report the auth status to the bridge!

    1MC<"We need to log this password reversal in the logbook:">!
    1MC<back_signal<watch_pass>>!

example_input_1: |                                            
    starboard_anchor

example_output_1: |
    Secure a watch, what's the password? starboard_anchor
    Security status: Aye
    We need to log this password reversal in the logbook:
    rohcna_draobrats

example_input_2: |
    port_bow

example_output_2: |
    Secure a watch, what's the password? port_bow
    Security status: Nay
    We need to log this password reversal in the logbook:
    wob_trop


#### TASK 3 ####

# there are just two example tokens below; you should remove or modify them!!
tokens: |
    Token name      Regex
    ----------      -----
    CMD             1MC|receive|declare|assign|lash|back_signal|signal_less_than|signal_contains|stand_by_and_await|stand_by_or_await|stand_by_not|log
    STRING          "([^"]*)"
    BOOL            Aye|Nay
    ID              [A-Za-z_][A-Za-z0-9_]*
    CMD_START       <
    CMD_END         >
    ARG_SEP         /
    STMT_END        !
    MULTI_CMD_SEP   ;
    --              [ \t\n]+


#### TASK 4 ####

# remove or replace the example production rule with your own!
grammar: |
    Program -> StatementList

    StatementList -> Statement StatementList
    StatementList -> Statement

    Statement -> Command OptionalLog STMT_END
    Statement -> Command MULTI_CMD_SEP CommandList STMT_END

    CommandList -> Command
    CommandList -> Command MULTI_CMD_SEP CommandList

    OptionalLog -> log
    OptionalLog -> 

    Command -> SinglePayloadCommand
    Command -> TwoPayloadCommand
    Command -> VariableDeclarationCommand

    SinglePayloadCommand -> 1MC < Payload >
    SinglePayloadCommand -> back_signal < Payload >
    SinglePayloadCommand -> stand_by_not < Payload >

    TwoPayloadCommand -> lash < Payload / Payload >
    TwoPayloadCommand -> signal_less_than < Payload / Payload >
    TwoPayloadCommand -> signal_contains < Payload / Payload >
    TwoPayloadCommand -> stand_by_and_await < Payload / Payload >
    TwoPayloadCommand -> stand_by_or_await < Payload / Payload >
    TwoPayloadCommand -> assign < Payload / Payload >

    VariableDeclarationCommand -> receive < ID >
    VariableDeclarationCommand -> declare < ID >

    Payload -> Literal
    Payload -> ID
    Payload -> Command

    Literal -> STRING
    Literal -> BOOL


#### TASK 5 ####

semantics: |
    Language operates like a ship, using ship-esque language. 
    
    Commands will be echoed back to the user (the Conn) when processed
    
    The back_signal command returns a new, reversed signal. It does not modify the original signal.
    
    signal_less_than and signal_contains commands return a boolean (Aye/Nay).
    
    stand_by_and_await, stand_by_or_await, and stand_by_not commands return a boolean (Aye/Nay).


#### TASK 6 ####

reviewer_for: Tucker Smith

reviewed_by: Austin Benigni

review_passed: Y

reviewer_comments: |
    Looks great!