parser grammar ParseRules;

// Imports the tokens assumed to be generated by Tokenizer.java
tokens {
    TILDE,
    OP_LT, OP_GT, OP_SUB, OP_ADD, OP_AND, OP_OR,
    BOOL, PRINT, INPUT, REV, LIT, ID
}

// Top-level rule for a complete program.
// A program is a sequence of statements.
program
    : stat program

| /* epsilon */
    ;

// Rule for a single statement.
// A statement is either a print operation or a variable assignment.
stat
    : PRINT expr                             # PrintStat

| ID TILDE expr                          # AssignmentStat
    ;

// Expression rules, structured by operator precedence.
// This is where the ambiguity of the original flat grammar is resolved.
expr
    : comp_expr
    ;

// Level 1: Comparison and Substring operators ('<', '>', '?').
// These operators have the lowest precedence.
comp_expr
    : bool_expr (OP_LT bool_expr             # OpLtExpr

| OP_GT bool_expr             # OpGtExpr
| OP_SUB bool_expr)           # OpSubExpr
| bool_expr
    ;

// Level 2: Boolean operators ('&', '|').
bool_expr
    : concat_expr (OP_AND concat_expr        # OpAndExpr

| OP_OR concat_expr)        # OpOrExpr
| concat_expr
    ;

// Level 3: Concatenation operator ('+').
concat_expr
    : rev_expr (OP_ADD rev_expr)             # OpAddExpr

| rev_expr
    ;

// Level 4: Unary Reverse operator ('r~...~').
// This is the highest precedence operator.
rev_expr
    : REV TILDE rev_expr TILDE               # RevExpr

| base_expr
    ;

// Level 0: Base expressions.
// These are the atomic components of any expression.
base_expr
    : LIT                                    # LitExpr

| BOOL                                   # BoolExpr
| INPUT                                  # InputExpr
| ID                                     # IdExpr
| TILDE expr TILDE                       # NestedExpr
    ;